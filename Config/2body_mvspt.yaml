NBODY: 2
FILE_PREFIX: 'bind_pt_otf'
CENTRALITY_CLASS:
  - [0,90]
CT_BINS: [0, 90]
PT_BINS: [2,3,4,5,6,9]
#PT_BINS: [1,2,3,4,5,6,9]


BDT_EFFICIENCY: [0.40, 1., 0.01] ##min, max ,step

DEDICATED_BACKGROUND: 0

MC_PATH: $HYPERML_TABLES_2/splines_tables/SignalTable.root
BKG_PATH: $HYPERML_TABLES_2/splines_tables/DataTable_18LS.root
DATA_PATH: $HYPERML_TABLES_2/splines_tables/DataTable_18.root
ANALYSIS_RESULTS_PATH: $HYPERML_TABLES_2/splines_tables/DataTable_18.root

XGBOOST_PARAMS:
  # general parameters
  silent: 1 # print message (useful to understand whats happening)
  n_jobs: 4 # number of available threads
  # learning task parameters
  objective: binary:logistic
  random_state: 42
  eval_metric: auc
  tree_method: hist
  

SIGMA_MC: False
LARGE_DATA: True
LOAD_LARGE_DATA: False



HYPERPARAMS:
  max_depth: 13
  learning_rate: 0.0982
  n_estimators: 181
  gamma: 0.4467
  min_child_weight: 5.75
  subsample: 0.74
  colsample_bytree: 0.57
  seed: 42

HYPERPARAMS_RANGE: #TODO: check if it works without tuples
  # booster parameters
  max_depth: !!python/tuple [5, 20] # defines the maximum depth of a single tree (regularization)
  learning_rate: !!python/tuple [0.01, 0.3] # learning rate
  n_estimators: !!python/tuple [50, 500] # number of boosting trees
  gamma: !!python/tuple [0.3, 1.1] # specifies the minimum loss reduction required to make a split
  min_child_weight: !!python/tuple [1, 12]
  subsample: !!python/tuple [0.5, 0.9] # denotes the fraction of observations to be randomly samples for each tree
  colsample_bytree: !!python/tuple [0.5, 0.9] # denotes the fraction of columns to be randomly samples for each tree
  # # lambda: (0,10]  # L2 regularization term on weights
  # # alpha: (0,10]  # L1 regularization term on weight

TRAINING_COLUMNS: 
  - V0CosPA
  - ct
  - ProngsDCA
  - PiProngPvDCAXY
  - He3ProngPvDCAXY
  - He3ProngPvDCA
  - PiProngPvDCA
  - NpidClustersHe3
  - TPCnSigmaHe3
  - TPCnSigmaPi
  - NitsClustersHe3
